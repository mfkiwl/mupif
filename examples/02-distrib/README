This example illustrates the top level control script 
representing a simulation pipeline made of two simple applications. 

The overall simulation is performed in a time loop, 
where one application provides data for the second application,
which computes the arithmetical average value of given data.

The main difference to Example01 is that this example uses Pyro4
communication and thus the client and server parts can be executed on 
different computers. No JobManager is used.


Prerequisities:
---------------
Python (preferably Python >=3.4) interpreter
Pyro module installed. To install Pyro, we recommend to use pip, a tool for installing and managing Python packages:
> pip install Pyro4

There is a configuration file ../Config.py which need to be set up according to your network and communication mode, i.e.
1) Local computer
2) SSH tunnel
3) VPN (Virtual private network) communication
4) VPN simulation on a local computer

The mode is set with the parameter -m, where the default is -m0 on a local computer.

Step 1 explained on -m0, i.e. local computer:
-------------------------------------------------
Start pyro name server executing tools/nameserver.py -mX where X is the mode.
When mode is local, i.e. -m0, the nameserver will listen on "127.0.0.1" locally. Note that in 
the case of remote IP address, a firewall has to be configured to accept connections at port 9090 where nameserver runs.

Step 2:
-------
Start server script $python server.py -mX where X is the mode.
By default, the server will listen on internal IP adress "127.0.0.1". If you want your server to listen
on your public IP adress, change the mode. Note that in the case of remote IP address, your firewall has to be
configured to accept connections at port 44382.

Step 3:
-------
Run client script $python Example02.py -m0
By default, the nameserver is assumed to be accesible at IP adress '127.0.0.1'. It will locate remote application and perform a few 
write/read attempts for concentration. If successful, it will write "Tesk OK".


Note on mode -m1, i.e. SSH tunnels
----------------------------------
SSH tunnel is estabilished between client and server, each of them located on different
or same computer. We need to estabilish network address translation (NAT) settings and port forwarding
configurations automatically. Config.py needs to reflect newtork setting, for example
nshost = '147.32.130.71', server = '147.32.130.71'.

## Generating SSH Public Key on Unix
In order to provide a public key, each user in your system must generate 
one if they don’t already have one. This process is similar across all
Unix-based operating systems. First, you should check to make sure you don’t already
have a key. By default, a user’s SSH keys are stored in that user’s ~/.ssh 
directory. You can easily check to see if you have a key already by going
to that directory and listing the contents:

$ cd ~/.ssh
$ ls
authorized_keys2  id_dsa       known_hosts
config            id_dsa.pub

You’re looking for a pair of files named something and something.pub, 
where the something is usually id_dsa or id_rsa. The .pub file is your
public key, and the other file is your private key. If you don’t have
these files (or you don’t even have a .ssh directory), you can create 
them by running a program called ssh-keygen, which is provided with 
the SSH package on Unix/Mac systems and comes with the MSysGit package
on Windows:

$ ssh-keygen
Generating public/private rsa key pair.
Enter file in which to save the key (/Users/schacon/.ssh/id_rsa):
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /Users/schacon/.ssh/id_rsa.
Your public key has been saved in /Users/schacon/.ssh/id_rsa.pub.
The key fingerprint is:
43:c5:5b:5f:b1:f1:50:43:ad:20:a6:92:6a:1f:9a:3a schacon@agadorlaptop.local

First it confirms where you want to save the key (.ssh/id_rsa), 
and then it asks twice for a passphrase, which you can leave empty
if you don’t want to type a password when you use the key.

Now, each user that does this has to send their public key to server
administrator. All they have to do is copy the contents of the .pub file
and e-mail it. The public keys look something like this:

$ cat ~/.ssh/id_rsa.pub
ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAklOUpkDHrfHY17SbrmTIpNLTGK9Tjom/BWDSU
GPl+nafzlHDTYW7hdI4yZ5ew18JH4JW9jbhUFrviQzM7xlELEVf4h9lFX5QVkbPppSwg0cda3
Pbv7kOdJ/MTyBlWXFCR+HAo3FXRitBqxiX1nKhXpHAZsMciLq8V6RjsNAQwdsdMFvSlVK/7XA
t3FaoJoAsncM1Q9x5+3V0Ww68/eIFmb1zuUFljQJKprrX88XypNDvjYNby6vw/Pb0rwert/En
mZ+AW4OZPnTPI89ZPmVMLuayrD2cE86Z/il8b+gw3r3+1nKatmIkjn2so1d01QraTlMqVSsbx
NrRFi9wrf+M7Q== schacon@agadorlaptop.local

## Generating SSH Public Key on Windows
Download PuTTYgen. Default key type is SSH-2 (RSA). Click Generate button and move
your mouse to generate some randomness. Save Private and Public keys. The public key
is also displayed in the top window. Send this public key to info@mmp-project.eu,
so a client is recognized on a server.
Alternatively, it is possible to import id_dsa private key from Unix and generate 
a public key for putty client. This *.ppk key is slightly different than id_dsa.pub
key.

Running $python Example02.py -m1
will give a hint how to create a ssh tunnel externally for communication, e.g.
*NIX: ssh -L 5555:machine1:44382 mmp@mech.fsv.cvut.cz
WIN: putty.exe -L 5555:machine1:44382 mmp@mech.fsv.cvut.cz -i C:\\Users\\whoever\\FIT-public-SSH2.ppk


Note on mode -m2, i.e. VPN network
-----------------------------
VPN ensures that nameserver, server and client are on a local-like network. 
You need to set up Config.py to reflect your current setting.

A virtual private network could be setup by e.g. openVPN by issuing a command with root priviledges such as 
$openvpn mupif1.ovpn from a local computer.
This assigns a new address to a local computer on a virtual IP address (e.g. 172.30.0.6 as tun0-00) while assigning virtual address on remote computer such 172.30.0.1 on tun0-00 (e.g. mech.fsv.cvut.cz as a server). Then, all communication pretends to run on a local-like virtual network.


Note on mode -m3, i.e. VPN local simulation network
----------------------------------------------
This mode does here the same as -m0, i.e. using local IP address for nameserver, server and client.

