This example performs a simple ping test, that can be used 
to verify connection between any client and server
(currently hosted at CTU resources).
The example illustrates, how to establish a connection to
a remote application and how a secure connection can be
extablished using a ssh tunnel.

================================================================================
Prerequisities
================================================================================
Authentication to a ssh server is based on a public ssh key. It is not easy 
and comfortable to enter password on login every time you connect to a server
(problems with TTY input and interaction when running a command on python's 
backround). 

To establish secure connection to a server, you have to send your 
public ssh key to info@mmp-project.eu.
For a description, on how to generate your ssh key, follow the section
"Generating SSH Public Key"
Note: the ping server will be available only for a limmited time. 
However, the server script is provided and can be hosted on any
server with MuPIF installed.

================================================================================
Generating SSH Public Key on Unix
================================================================================
In order to provide a public key, each user in your system must generate 
one if they don’t already have one. This process is similar across all
Unix-based operating systems. First, you should check to make sure you don’t already
have a key. By default, a user’s SSH keys are stored in that user’s ~/.ssh 
directory. You can easily check to see if you have a key already by going
to that directory and listing the contents:

$ cd ~/.ssh
$ ls
authorized_keys2  id_dsa       known_hosts
config            id_dsa.pub

You’re looking for a pair of files named something and something.pub, 
where the something is usually id_dsa or id_rsa. The .pub file is your
public key, and the other file is your private key. If you don’t have
these files (or you don’t even have a .ssh directory), you can create 
them by running a program called ssh-keygen, which is provided with 
the SSH package on Unix/Mac systems and comes with the MSysGit package
on Windows:

$ ssh-keygen
Generating public/private rsa key pair.
Enter file in which to save the key (/Users/schacon/.ssh/id_rsa):
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /Users/schacon/.ssh/id_rsa.
Your public key has been saved in /Users/schacon/.ssh/id_rsa.pub.
The key fingerprint is:
43:c5:5b:5f:b1:f1:50:43:ad:20:a6:92:6a:1f:9a:3a schacon@agadorlaptop.local

First it confirms where you want to save the key (.ssh/id_rsa), 
and then it asks twice for a passphrase, which you can leave empty
if you don’t want to type a password when you use the key.

Now, each user that does this has to send their public key to server
administrator. All they have to do is copy the contents of the .pub file
and e-mail it. The public keys look something like this:

$ cat ~/.ssh/id_rsa.pub
ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAklOUpkDHrfHY17SbrmTIpNLTGK9Tjom/BWDSU
GPl+nafzlHDTYW7hdI4yZ5ew18JH4JW9jbhUFrviQzM7xlELEVf4h9lFX5QVkbPppSwg0cda3
Pbv7kOdJ/MTyBlWXFCR+HAo3FXRitBqxiX1nKhXpHAZsMciLq8V6RjsNAQwdsdMFvSlVK/7XA
t3FaoJoAsncM1Q9x5+3V0Ww68/eIFmb1zuUFljQJKprrX88XypNDvjYNby6vw/Pb0rwert/En
mZ+AW4OZPnTPI89ZPmVMLuayrD2cE86Z/il8b+gw3r3+1nKatmIkjn2so1d01QraTlMqVSsbx
NrRFi9wrf+M7Q== schacon@agadorlaptop.local

================================================================================
Generating SSH Public Key on Windows
================================================================================
Download PuTTYgen. Default key type is SSH-2 (RSA). Click Generate button and move
your mouse to generate some randomness. Save Private and Public keys. The public key
is also displayed in the top window. Send this public key to info@mmp-project.eu,
so a client is recognized on a server.
Alternatively, it is possible to import id_dsa private key from Unix and generate 
a public key for putty client. This *.ppk key is slightly different than id_dsa.pub
key.

================================================================================
Running a Example06.py
================================================================================
ssh client needs to be installed on a system. Unix-based systems use "ssh" client,
windows users need "putty" client. These clients establish a ssh tunnel 
forwarding (and encrypting) the local port port 5555 to
remote port 44382 (pyro daemon on remote server). Data are transmitted securely.

You need to comment/uncomment line calling the method PyroUtil.SshTunnel, 
depending on Unix/Windows. For windows, you need to specify a filename with a 
public ssh key.

Run a command: python Example06.py

================================================================================
EXPECTED OUTPUT:
================================================================================
You should obtain the following output:
...
Working application on server CTU Ping server, version 1.0
Generating test sequence ...
done
Received 4.5 expected 4.5
Test PASSED
Time consumed 0.710026 s
Ping test finished
