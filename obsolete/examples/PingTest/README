This example performs ping test, that can be used 
to verify connection between any client and multiple servers
running simulation tools.

The example illustrates, how to establish a connection to
a remote applications and how the secure connection can be
extablished using ssh tunnel.

Note: The individual remote servers (and applications)
may not be operational all the time.

================================================================================
Prerequisities:
================================================================================
The available servers are configured in conf.py file
The application servers should be set up and started in advance at remote locations.

To establish secure connection to a server, you have to send your 
public ssh key to server administrator. The administrator must run
the server application and will add your public ssh key into the list 
of authorized_keys. Note that the application servers can be operational 
for limitted time only.
For a description, on how to generate your ssh key, follow the section
"Generating ssh keys".

The nameserver is hosted at CTU resources and will be operational 
for a limited time only.

================================================================================
Generating Your SSH Public Key
================================================================================
In order to provide a public key, each user in your system must generate 
one if they don’t already have one. This process is similar across all
operating systems. First, you should check to make sure you don’t already
have a key. By default, a user’s SSH keys are stored in that user’s ~/.ssh 
directory. You can easily check to see if you have a key already by going
to that directory and listing the contents:

$ cd ~/.ssh
$ ls
authorized_keys2  id_dsa       known_hosts
config            id_dsa.pub

You’re looking for a pair of files named something and something.pub, 
where the something is usually id_dsa or id_rsa. The .pub file is your
public key, and the other file is your private key. If you don’t have
these files (or you don’t even have a .ssh directory), you can create 
them by running a program called ssh-keygen, which is provided with 
the SSH package on Linux/Mac systems and comes with the MSysGit package
on Windows:

$ ssh-keygen
Generating public/private rsa key pair.
Enter file in which to save the key (/Users/schacon/.ssh/id_rsa):
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /Users/schacon/.ssh/id_rsa.
Your public key has been saved in /Users/schacon/.ssh/id_rsa.pub.
The key fingerprint is:
43:c5:5b:5f:b1:f1:50:43:ad:20:a6:92:6a:1f:9a:3a schacon@agadorlaptop.local

First it confirms where you want to save the key (.ssh/id_rsa), 
and then it asks twice for a passphrase, which you can leave empty
if you don’t want to type a password when you use the key.

Now, each user that does this has to send their public key to server
administrator. All they have to do is copy the contents of the .pub file
and e-mail it. The public keys look something like this:

$ cat ~/.ssh/id_rsa.pub
ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAklOUpkDHrfHY17SbrmTIpNLTGK9Tjom/BWDSU
GPl+nafzlHDTYW7hdI4yZ5ew18JH4JW9jbhUFrviQzM7xlELEVf4h9lFX5QVkbPppSwg0cda3
Pbv7kOdJ/MTyBlWXFCR+HAo3FXRitBqxiX1nKhXpHAZsMciLq8V6RjsNAQwdsdMFvSlVK/7XA
t3FaoJoAsncM1Q9x5+3V0Ww68/eIFmb1zuUFljQJKprrX88XypNDvjYNby6vw/Pb0rwert/En
mZ+AW4OZPnTPI89ZPmVMLuayrD2cE86Z/il8b+gw3r3+1nKatmIkjn2so1d01QraTlMqVSsbx
NrRFi9wrf+M7Q== schacon@agadorlaptop.local



================================================================================
Running a test
================================================================================

To run a ping test on your computer, following steps are required:
The ssh tunnels will be created authomatically for you,
provided you have ssh client installed. 

1) Open a new terminal window
2) run a ping test 
python test.py

================================================================================
EXPECTED OUTPUT:
================================================================================

Connected to Celsian API, version 1.0
Connected to Micress API, version 1.0
done
Time consumed 1.100570 s
Ping test finished
